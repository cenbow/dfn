
####FileCache 本地文件缓存####
#相对地址
fileCachePath =  /FileCache

#最大生命周期
fileMaxLifeSeconds = 60*1000

#有效时间
fileExpiresInSeconds = 60*1000

#是否永远存在
fileIsEternal = false




####MemCached 分布式缓存####

# 设置连接池可用的cache服务器列表，server的构成形式是IP:PORT（如：127.0.0.1:11211）  , 127.0.0.1:11211  
memServers =  192.168.0.107:11211

# 设置连接池可用cache服务器的权重，和server数组的位置一一对应
# 其实现方法是通过根据每个权重在连接池的bucket中放置同样数目的server（如下代码所示），因此所有权重的最大公约数应该是1，不然会引起bucket资源的浪费。5 ,  5  
memWeight = 1

# 设置开始时每个cache服务器的可用连接数 
memInitConn = 5

# 设置每个服务器最少可用连接数
memMinConn = 5

# 设置每个服务器最大可用连接数 
memMaxConn = 250

# 设置可用连接池的最长等待时间 
memMaxIdle = 1000*60*60*6

# 设置连接池维护线程的睡眠时间
# 设置为0，维护线程不启动
# 维护线程主要通过log输出socket的运行状况，监测连接数目及空闲等待时间等参数以控制连接创建和关闭。 
memMaintSleep = 30

# 设置是否使用Nagle算法，因为我们的通讯数据量通常都比较大（相对TCP控制数据）而且要求响应及时，因此该值需要设置为false（默认是true）
memNagle = false

# 设置socket的读取等待超时值 
memSocketTO = 3000

#设置socket的连接等待超时值 
memSocketConnectTO = 0

#  设置连接心跳监测开关。
#  设为true则每次通信都要进行连接是否有效的监测，造成通信次数倍增，加大网络负载，因此该参数应该在对HA要求比较高的场合设为TRUE，默认状态是false。
memAliveCheck = true

# 设置连接失败恢复开关
# 设置为TRUE，当宕机的服务器启动或中断的网络连接后，这个socket连接还可继续使用，否则将不再使用，默认状态是true，建议保持默认。
memFailBack =

# 设置容错开关
# 设置为TRUE，当当前socket不可用时，程序会自动查找可用连接并返回，否则返回NULL，默认状态是true，建议保持默认。
memFailover = true;

# 设置hash算法
# alg=0 使用String.hashCode()获得hash code,该方法依赖JDK，可能和其他客户端不兼容，建议不使用
# alg=1 使用original 兼容hash算法，兼容其他客户端
# alg=2 使用CRC32兼容hash算法，兼容其他客户端，性能优于original算法
# alg=3 使用MD5 hash算法
# 采用前三种hash算法的时候，查找cache服务器使用余数方法。采用最后一种hash算法查找cache服务时使用consistent方法。
memHashingAlg =

#  设定是否压缩放入cache中的数据
#  默认值是true
#  如果设定该值为true，需要设定CompressThreshold?
memCompressEnable = true

# 设定需要压缩的cache数据的阈值
# 默认值是30k
memCompressThreshold = 64 * 1024

# 设置cache数据的原始类型是String
# 默认值是false
# 只有在确定cache的数据类型是string的情况下才设为true，这样可以加快处理速度。
memPrimitiveAsString = 

# 当primitiveAsString为true时使用的编码转化格式
# 默认值是utf-8
# 如果确认主要写入数据是中文等非ASCII编码字符，建议采用GBK等更短的编码格式
memDefaultEncoding =


